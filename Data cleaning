1.	Checking for duplicates:
SELECT ID, COUNT(ID)
FROM marketing_data
GROUP BY ID
HAVING COUNT(ID)>1;

There are no duplicate values in the table.

2. checking for null values

3. Cleaning the income column
The income column has symbols inconsistent with its actual datatype. So I used replace and substring to extract the numerical income value and update the column.

UPDATE marketing_data
SET Income = CASE WHEN Income <> ' ' Then REPLACE(SUBSTRING(Income,CHARINDEX('"',Income)+2,CHARINDEX('.',Income)-3),',','')
		ELSE 'N/A'
		END

Next, I have updated the Income column to datatype INT from varchar
UPDATE marketing_data
SET Income = CASE WHEN Income <> 'N/A' THEN CONVERT(INT,Income)
		ELSE NULL
		END


4. Most of the integer column and date is in varchar datatpe. I have altered the columns to convert it into its appropriate datatype
ALTER TABLE marketing_data
ALTER COLUMN ID FLOAT NOT NULL

ALTER TABLE marketing_data
ALTER COLUMN Date_Customer_Joined DATE

ALTER TABLE marketing_data
ALTER COLUMN Income float

ALTER TABLE marketing_data
ALTER COLUMN Year_Birth DATE

ALTER TABLE marketing_data
ALTER COLUMN Kidhome INT

ALTER TABLE marketing_data
ALTER COLUMN Teenhome INT

ALTER TABLE marketing_data
ALTER Column Recency INT

ALTER TABLE marketing_data
ALTER Column Amount_On_Wines INT

ALTER TABLE marketing_data
ALTER Column Amount_On_Fruits INT;

ALTER TABLE marketing_data
ALTER Column Amount_On_MeatProducts INT;

ALTER TABLE marketing_data
ALTER Column Amount_On_FishProducts INT;

ALTER TABLE marketing_data
ALTER Column Amount_On_SweetProducts INT;

ALTER TABLE marketing_data
ALTER Column Amount_On_GoldProds INT;

ALTER TABLE marketing_data
ALTER COLUMN NumDealsPurchases INT

ALTER TABLE marketing_data
ALTER COLUMN NumWebPurchases INT

ALTER TABLE marketing_data
ALTER COLUMN NumCatalogPurchases INT

ALTER TABLE marketing_data
ALTER COLUMN NumStorePurchases INT

ALTER TABLE marketing_data
ALTER COLUMN NumWebVisitsMonth INT

ALTER TABLE marketing_data
ALTER COLUMN AcceptedCmp1 INT

ALTER TABLE marketing_data
ALTER COLUMN AcceptedCmp2 INT

ALTER TABLE marketing_data
ALTER COLUMN AcceptedCmp3 INT

ALTER TABLE marketing_data
ALTER COLUMN AcceptedCmp4 INT

ALTER TABLE marketing_data
ALTER COLUMN AcceptedCmp5 INT

ALTER TABLE marketing_data
ADD Revenue INT

5. Updating the null values in the Income column to its median value
The income column has 24 rows of null values contributing to 1.07 percent of data. 
So let's replace the null values with the income column's median value.

Finding median value:
Here I have used the Row window function to find the median value as SQL does not have an inbuild function to calculate the value.
I numbered the columns using the row function and then sorted them in ascending and descending order.
Next, I used the where clause to filter the value with one or less than one value difference when subtracting both columns.
This gives us the median value 

WITH cte(ASCc,DSC) as (SELECT
				ROW_NUMBER() OVER(ORDER BY Income ASC) AS ASCc,
				ROW_NUMBER() OVER(ORDER BY Income DESC) AS DSC

FROM marketing_data)
SELECT * FROM cte
WHERE ABS(ASCc-DSC)<= 1

Updating the median value in the Income column:
UPDATE marketing_data
SET [Income ] = CASE WHEN Income IS NULL THEN 1121
		ELSE Income
		END

6. Next, there are some extreme outliers in the year column, which acts out of context to the dataset
so removing them is the best solution as they could distort the distribution.

SELECT ID, YEAR(Year_birth) FROM marketing_data
ORDER BY YEAR(Year_birth)

DELETE FROM marketing_data
WHERE ID IN(11004,1150,7829)

7. Created two new columns from the current columns for analysis(age and total amount)

ALTER TABLE marketing_data
ADD Total_amount INT
ALTER TABLE marketing_data
ADD Age INT

UPDATE marketing_data
SET Total_amount = Amount_On_Wines+Amount_On_Fruits+Amount_On_MeatProducts+Amount_On_FishProducts+Amount_On_SweetProducts+Amount_On_GoldProds

UPDATE marketing_data
<<<<<<< HEAD
SET Age = Year(Date_Customer_Joined)-YEAR(Year_Birth)
=======
SET Age = Year(Date_Customer_Joined)-YEAR(Year_Birth)
>>>>>>> 88205521a0784efe401284c3813b007a13b20edc
